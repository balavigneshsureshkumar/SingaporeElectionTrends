---
title: "Singapore Election Trends (1959-2025)"
author: ["Dan Lai Kai Yi", "Ng Jia Wei", "Suresh Kumar Balavignesh", "Kumar Devadharshini", "Putri Nadrah Binte Jefreydin", "Tan De Wei"]
date: "2025-05-28"
format: html
editor: visual
---

```{r}
library(readr)
library(dplyr)
library(stringr)
library(janitor)
library(ggplot2)
library(ggalt)

# Step 1: Read and clean the data
election_data <- read_csv("dataset/ParliamentaryGeneralElectionResultsbyCandidateUpdated_with_regions.csv") %>%
  clean_names() %>%
  mutate(
    year = as.integer(year),
    party = str_trim(party),
    vote_count = as.integer(gsub(",", "", vote_count)),
    party_clean = case_when(
      str_detect(party, regex("PAP", ignore_case = TRUE)) ~ "PAP",
      str_detect(party, regex("WP", ignore_case = TRUE)) ~ "WP",
      str_detect(party, regex("SDP", ignore_case = TRUE)) ~ "SDP",
      str_detect(tolower(party), "indp|independent") ~ "Independent",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(vote_count), !is.na(year))  # Do not filter party_clean here, keep all parties for total votes

# Step 2: Calculate total votes for each year across all parties
total_votes_year <- election_data %>%
  group_by(year) %>%
  summarise(total_votes_all = sum(vote_count, na.rm = TRUE), .groups = "drop")

# Step 3: Aggregate votes by party_clean per year (only valid party_clean)
party_votes_year <- election_data %>%
  filter(!is.na(party_clean)) %>%  # Filter only known parties here
  group_by(year, party_clean) %>%
  summarise(party_votes = sum(vote_count, na.rm = TRUE), .groups = "drop")

# Step 4: Join total votes per year with party votes and calculate vote share
party_trend <- party_votes_year %>%
  left_join(total_votes_year, by = "year") %>%
  mutate(
    vote_share = (party_votes / total_votes_all) * 100,
    party_clean = factor(party_clean, levels = c("PAP", "WP", "SDP", "Independent"))
  ) %>%
  arrange(year, party_clean)

# View the result
print(party_trend, n = Inf)

# region
# Aggregate votes by region, year, and party_clean
region_party_votes <- election_data %>%
  filter(!is.na(party_clean), !is.na(region)) %>%
  group_by(region, year, party_clean) %>%
  summarise(region_party_votes = sum(vote_count, na.rm = TRUE), .groups = "drop")

# Calculate total votes per region and year (all parties)
total_votes_region_year <- election_data %>%
  filter(!is.na(region)) %>%
  group_by(region, year) %>%
  summarise(total_votes_region = sum(vote_count, na.rm = TRUE), .groups = "drop")

# Join and compute vote share by party in each region for each year
region_party_performance <- region_party_votes %>%
  left_join(total_votes_region_year, by = c("region", "year")) %>%
  mutate(vote_share_region = (region_party_votes / total_votes_region) * 100) %>%
  arrange(region, party_clean, year)

region_party_trends <- region_party_performance %>%
  group_by(region, party_clean) %>%
  summarise(
    first_year = min(year),
    last_year = max(year),
    first_vote_share = vote_share_region[year == first_year][1],
    last_vote_share = vote_share_region[year == last_year][1],
    .groups = "drop"
  ) %>%
  mutate(
    vote_share_diff = last_vote_share - first_vote_share,
    performance_trend = case_when(
      is.na(first_vote_share) | is.na(last_vote_share) ~ NA_character_,
      vote_share_diff > 0 ~ "↑",
      vote_share_diff < 0 ~ "↓",
      TRUE ~ "→"  # no change
    ),
    first_vote_share = round(first_vote_share, 2),
    last_vote_share = round(last_vote_share, 2),
    vote_share_diff = round(vote_share_diff, 2)
  )
print(region_party_trends, n = Inf)


# Sparkline-style plot with year ticks and percentage labels
ggplot(party_trend, aes(x = year, y = vote_share, group = party_clean, color = party_clean)) +
  geom_xspline(size = 1, spline_shape = -0.6) + 
  geom_point(size = 2) +
  geom_text(aes(label = round(vote_share, 2)), vjust = -1.5, size = 3, show.legend = FALSE) +
  facet_wrap(~ party_clean, scales = "free_y", ncol = 1, strip.position = "left") +
  scale_x_continuous(
    breaks = unique(party_trend$year),
    guide = guide_axis(check.overlap = TRUE)
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
  coord_cartesian(clip = "off") +
  theme_minimal(base_size = 12) +
  theme(
    strip.text = element_text(face = "bold"),
    axis.title = element_blank(),
    legend.position = "none",
    panel.grid.minor = element_blank(),
    panel.spacing = unit(1, "lines"),
    plot.margin = margin(t = 20, r = 20, b = 10, l = 10),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  labs(
    title = "Sparkline Trends: Vote Share by Party Across Elections",
    subtitle = "Smoothed curves with actual vote share labels per year"
  )

library(purrr)

region_sparkplots <- split(region_party_performance, region_party_performance$region) %>%
  map(~{
    ggplot(.x, aes(x = year, y = vote_share_region, group = party_clean, color = party_clean)) +
      geom_xspline(size = 1, spline_shape = -0.6) +
      geom_point(size = 2) +
      geom_text(aes(label = round(vote_share_region, 2)), vjust = -1.5, size = 3, show.legend = FALSE) +
      facet_wrap(~ party_clean, scales = "free_y", ncol = 1, strip.position = "left") +
      scale_x_continuous(
        breaks = unique(.x$year),
        guide = guide_axis(check.overlap = TRUE)
      ) +
      scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
      coord_cartesian(clip = "off") +
      theme_minimal(base_size = 12) +
      theme(
        strip.text = element_text(face = "bold"),
        axis.title = element_blank(),
        legend.position = "none",
        panel.grid.minor = element_blank(),
        panel.spacing = unit(1, "lines"),
        plot.margin = margin(t = 20, r = 20, b = 10, l = 10),
        axis.text.x = element_text(angle = 45, hjust = 1)
      ) +
      labs(
        title = paste("Sparkline Trend: Vote Share by Party in", unique(.x$region)),
        subtitle = "Smoothed curves with actual vote share labels per year"
      )
  })

region_sparkplots[["Central"]]
region_sparkplots[["West"]]
region_sparkplots[["East"]]
region_sparkplots[["North"]]
region_sparkplots[["North-East"]]
```
